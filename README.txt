README for cs130 webserver
Based on instructions found in 
https://docs.google.com/document/d/1-BsDsv6BerargpyivX1T6BwPCgQ63pBpczkZajHVOtY/edit#heading=h.b8xr8euy7vvy


#How the source code is laid out:


The main entry point of our server is found in server_main.cc. From here, it will 
create a server object, whose details can be found in server.h/.cc. 
The server object can parse the config file and is capable of creating new sessions
when a client connects to our the server. 
For each session (session.h/.cc), a handle_manager (handle_manager.h/.cc) will decide
and create what type of handler to handle a single request. The handlers such as echo, static, 404
all are from the same interface (handler.h). 


#How to build, test, and run the code:


Assuming you are in the base project directory...
Make a "build" directory if one does not already exist
    `mkdir build`
    `cd build`
We use cmake to help build our project.
Modifications can be made in CMakeLists.txt in the base project directory. Our 
cmake is configured to copy the contents of the static_root dir into the build
dir in order to have a more consistent way to access static files.
    `cmake ..`
Now make the binaries using the files generated by cmake
    `make`
Run tests
Currently unit tests can be found in the tests directory in the base project directory
and integration tests can be found in integration.sh in the base project directory
    `make test`

In order to manually run the server...
Assuming you have already run `cmake..` and `make` and are currently in the build directory...
    `./bin/server ../configs/my_config
server is the binary and main entry point for our server and the only parameter is a config file


#How to add a request handler, including
a well-documented example of an existing handler, and
well-documented header files:


In order to add a request handler, the new handler must use handler.h as an interface
and implement the virtual function get_response(). 
For example, echo_handler only implements get_response() and has its own constructor
and destructor. 

The config file must contain a new handler block to signify the existence of one.
In the echo_handler example, our config file contains a block that follows the
format:
handler echo {
  <HANDLER SPECIFIC DETAILS>
}

Within the block, there should be a "location" keyword followed by the path that
the handler is in charge of. For example "/echo" for the echo_handler. If a 
handler has to have a path to serve files from for example, it also should have 
a "root" keyword followed by a path such as "foo/bar". A more complete handler
config is our static_handler which looks like:
handler static {
  location /static;
  root static;
}

One last step is to add a new if statement to handler_manager.cc that, when the
name matches your new handler name, will return a unique_ptr to a newly created
handler. 